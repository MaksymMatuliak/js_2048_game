{"version":3,"sources":["scripts/main.js"],"names":["desk","SIZE_OF_DESK","length","RANDOM_VALUE","BIGGER_RANDOM_VALUE","BIGGER_RANDOM_VALUE_CHANCE","loseMessage","document","querySelector","winMessage","startMessage","gameFieldRows","rows","startButton","getElementsByClassName","score","body","isGameStarted","isDeskMoved","init","addRandomValueToDesk","rowIndex","cells","cellIndex","cellValue","innerText","className","checkPossibilityToMove","checkWinSituation","availableCell","push","randomCell","Math","floor","random","currentRandomValue","parseInt","moveUp","move","currentRowIndex","currentCellValue","currentCell","higherCell","merge","includes","rotateDesk","times","rotate","source","destination","Array","i","j","some","arr","cleanDesk","addEventListener","e","key","classList","add"],"mappings":"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","file":"main.cb95f8cc.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet desk = [\n  [null, null, null, null],\n  [null, null, null, null],\n  [null, null, null, null],\n  [null, null, null, null],\n];\n\nconst SIZE_OF_DESK = desk.length;\nconst RANDOM_VALUE = 2;\nconst BIGGER_RANDOM_VALUE = 4;\nconst BIGGER_RANDOM_VALUE_CHANCE = 0.1;\n\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\n\nconst gameFieldRows = document.querySelector('tbody').rows;\nconst startButton = document.getElementsByClassName('button start')[0];\nconst score = document.querySelector('.game-score');\nconst body = document.querySelector('body');\n\nlet isGameStarted = false;\nlet isDeskMoved = false;\n\nbody.addEventListener('keydown', (e) => {\n  if (!isGameStarted) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moveUp();\n      init();\n      break;\n    case 'ArrowDown':\n      rotateDesk(2);\n      moveUp();\n      rotateDesk(2);\n      init();\n      break;\n    case 'ArrowRight':\n      rotateDesk(3);\n      moveUp();\n      rotateDesk();\n      init();\n      break;\n    case 'ArrowLeft':\n      rotateDesk();\n      moveUp();\n      rotateDesk(3);\n      init();\n      break;\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  if (isGameStarted) {\n    cleanDesk();\n  }\n\n  score.innerText = 0;\n  isGameStarted = true;\n  isDeskMoved = true;\n  startButton.className = 'button restart';\n  startButton.innerText = 'Restart';\n\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  addRandomValueToDesk();\n  init();\n});\n\nfunction init() {\n  if (!isDeskMoved) {\n    return;\n  }\n\n  addRandomValueToDesk();\n\n  for (let rowIndex = 0; rowIndex < SIZE_OF_DESK; rowIndex++) {\n    const cells = gameFieldRows[rowIndex].cells;\n\n    for (let cellIndex = 0; cellIndex < SIZE_OF_DESK; cellIndex++) {\n      const cellValue = desk[rowIndex][cellIndex];\n\n      cells[cellIndex].innerText = cellValue;\n      cells[cellIndex].className = `field-cell field-cell--${cellValue}`;\n    }\n  }\n\n  if (!checkPossibilityToMove()) {\n    loseMessage.className = 'message message-lose';\n  }\n\n  if (checkWinSituation()) {\n    winMessage.className = 'message message-win';\n  }\n\n  isDeskMoved = false;\n}\n\nfunction addRandomValueToDesk() {\n  const availableCell = [];\n\n  for (let rowIndex = 0; rowIndex < SIZE_OF_DESK; rowIndex++) {\n    for (let cellIndex = 0; cellIndex < SIZE_OF_DESK; cellIndex++) {\n      if (desk[rowIndex][cellIndex] === null) {\n        availableCell.push({\n          rowIndex,\n          cellIndex,\n        });\n      }\n    }\n  }\n\n  if (availableCell.length === 0) {\n    return false;\n  }\n\n  const randomCell\n    = availableCell[Math.floor(Math.random() * availableCell.length)];\n  let currentRandomValue = RANDOM_VALUE;\n\n  if (Math.random() <= BIGGER_RANDOM_VALUE_CHANCE) {\n    currentRandomValue = BIGGER_RANDOM_VALUE;\n  }\n\n  desk[randomCell.rowIndex][randomCell.cellIndex] = currentRandomValue;\n  score.innerText = currentRandomValue + parseInt(score.innerText);\n\n  return true;\n}\n\nfunction moveUp() {\n  const move = () => {\n    for (let rowIndex = 1; rowIndex < SIZE_OF_DESK; rowIndex++) {\n      for (let cellIndex = 0; cellIndex < SIZE_OF_DESK; cellIndex++) {\n        let currentRowIndex = rowIndex;\n        const currentCellValue = desk[rowIndex][cellIndex];\n\n        if (currentCellValue === null) {\n          continue;\n        }\n\n        while (desk[currentRowIndex - 1][cellIndex] === null) {\n          desk[currentRowIndex - 1][cellIndex] = currentCellValue;\n          desk[currentRowIndex][cellIndex] = null;\n          isDeskMoved = true;\n\n          if (currentRowIndex - 1 > 0) {\n            currentRowIndex--;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  const merge = () => {\n    for (let rowIndex = 1; rowIndex < SIZE_OF_DESK; rowIndex++) {\n      for (let cellIndex = 0; cellIndex < SIZE_OF_DESK; cellIndex++) {\n        const currentCell = desk[rowIndex][cellIndex];\n        const higherCell = desk[rowIndex - 1][cellIndex];\n\n        if (currentCell === null) {\n          continue;\n        }\n\n        if (higherCell === currentCell) {\n          desk[rowIndex - 1][cellIndex] = currentCell * 2;\n          desk[rowIndex][cellIndex] = null;\n          isDeskMoved = true;\n        }\n      }\n    }\n  };\n\n  move();\n  merge();\n  move();\n}\n\nfunction checkPossibilityToMove() {\n  for (let rowIndex = 0; rowIndex < SIZE_OF_DESK; rowIndex++) {\n    if (desk[rowIndex].includes(null)) {\n      return true;\n    }\n\n    for (let cellIndex = 0; cellIndex < SIZE_OF_DESK - 1; cellIndex++) {\n      if (desk[rowIndex][cellIndex] === desk[rowIndex][cellIndex + 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let rowIndex = 0; rowIndex < SIZE_OF_DESK - 1; rowIndex++) {\n    for (let cellIndex = 0; cellIndex < SIZE_OF_DESK; cellIndex++) {\n      if (desk[rowIndex][cellIndex] === desk[rowIndex + 1][cellIndex]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction rotateDesk(times = 1) {\n  const rotate = source => {\n    const destination = new Array(SIZE_OF_DESK);\n\n    for (let i = 0; i < SIZE_OF_DESK; i++) {\n      destination[i] = new Array(SIZE_OF_DESK);\n    }\n\n    for (let i = 0; i < SIZE_OF_DESK; i++) {\n      for (let j = 0; j < SIZE_OF_DESK; j++) {\n        destination[i][j] = source[SIZE_OF_DESK - j - 1][i];\n      }\n    }\n\n    return destination;\n  };\n\n  for (let i = 0; i < times; i++) {\n    desk = rotate(desk);\n  }\n}\n\nfunction checkWinSituation() {\n  return desk.some(arr => arr.includes(2048));\n}\n\nfunction cleanDesk() {\n  desk = [\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n  ];\n}\n"]}